// Code generated by MockGen. DO NOT EDIT.
// Source: weekly_work.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "influ-dojo/api/domain/model"
	reflect "reflect"
)

// MockWeeklyWork is a mock of WeeklyWork interface.
type MockWeeklyWork struct {
	ctrl     *gomock.Controller
	recorder *MockWeeklyWorkMockRecorder
}

// MockWeeklyWorkMockRecorder is the mock recorder for MockWeeklyWork.
type MockWeeklyWorkMockRecorder struct {
	mock *MockWeeklyWork
}

// NewMockWeeklyWork creates a new mock instance.
func NewMockWeeklyWork(ctrl *gomock.Controller) *MockWeeklyWork {
	mock := &MockWeeklyWork{ctrl: ctrl}
	mock.recorder = &MockWeeklyWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeeklyWork) EXPECT() *MockWeeklyWorkMockRecorder {
	return m.recorder
}

// LoadTop3 mocks base method.
func (m *MockWeeklyWork) LoadTop3() ([]*model.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTop3")
	ret0, _ := ret[0].([]*model.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTop3 indicates an expected call of LoadTop3.
func (mr *MockWeeklyWorkMockRecorder) LoadTop3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTop3", reflect.TypeOf((*MockWeeklyWork)(nil).LoadTop3))
}

// LoadByScreenName mocks base method.
func (m *MockWeeklyWork) LoadByScreenName(screenName string) (*model.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByScreenName", screenName)
	ret0, _ := ret[0].(*model.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByScreenName indicates an expected call of LoadByScreenName.
func (mr *MockWeeklyWorkMockRecorder) LoadByScreenName(screenName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByScreenName", reflect.TypeOf((*MockWeeklyWork)(nil).LoadByScreenName), screenName)
}

// Save mocks base method.
func (m *MockWeeklyWork) Save(work *model.Work) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", work)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWeeklyWorkMockRecorder) Save(work interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWeeklyWork)(nil).Save), work)
}
