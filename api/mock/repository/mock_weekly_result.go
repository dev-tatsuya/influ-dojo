// Code generated by MockGen. DO NOT EDIT.
// Source: weekly_result.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "influ-dojo/api/domain/model"
	reflect "reflect"
)

// MockWeeklyResult is a mock of WeeklyResult interface.
type MockWeeklyResult struct {
	ctrl     *gomock.Controller
	recorder *MockWeeklyResultMockRecorder
}

// MockWeeklyResultMockRecorder is the mock recorder for MockWeeklyResult.
type MockWeeklyResultMockRecorder struct {
	mock *MockWeeklyResult
}

// NewMockWeeklyResult creates a new mock instance.
func NewMockWeeklyResult(ctrl *gomock.Controller) *MockWeeklyResult {
	mock := &MockWeeklyResult{ctrl: ctrl}
	mock.recorder = &MockWeeklyResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeeklyResult) EXPECT() *MockWeeklyResultMockRecorder {
	return m.recorder
}

// LoadTop3 mocks base method.
func (m *MockWeeklyResult) LoadTop3() ([]*model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTop3")
	ret0, _ := ret[0].([]*model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTop3 indicates an expected call of LoadTop3.
func (mr *MockWeeklyResultMockRecorder) LoadTop3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTop3", reflect.TypeOf((*MockWeeklyResult)(nil).LoadTop3))
}

// LoadByScreenName mocks base method.
func (m *MockWeeklyResult) LoadByScreenName(screenName string) (*model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByScreenName", screenName)
	ret0, _ := ret[0].(*model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByScreenName indicates an expected call of LoadByScreenName.
func (mr *MockWeeklyResultMockRecorder) LoadByScreenName(screenName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByScreenName", reflect.TypeOf((*MockWeeklyResult)(nil).LoadByScreenName), screenName)
}

// Save mocks base method.
func (m *MockWeeklyResult) Save(work *model.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", work)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWeeklyResultMockRecorder) Save(work interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWeeklyResult)(nil).Save), work)
}
